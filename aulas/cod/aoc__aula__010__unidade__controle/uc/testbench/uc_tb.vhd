-- Testbench generated by script.
-- Date: Ter,02/07/2013-22:42:14
-- Author: rogerio
-- Comments: Test of uc entity..
 
library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use ieee.std_logic_arith.all;

-- print messages.
use std.textio.all;
use ieee.std_logic_textio.all;

entity uc_tb is
end uc_tb;

architecture funcional of uc_tb is
  --  Component declaration.
  component uc
	port (
            ir: in std_logic_vector(31 downto 0); 
            op_code, funct: out std_logic_vector(5 downto 0);
            op_mode: out std_logic_vector(2 downto 0); 
            rs, rt, rd, shamt: out std_logic_vector(4 downto 0); 
            imm: out std_logic_vector(15 downto 0); 
            address: out std_logic_vector(25 downto 0)
        );
  end component;
  --  Specifies the entity which is linked with the component. (Especifica qual a entidade está vinculada com o componente).
  for uc_0: uc use entity work.uc;
      signal s_t_ir: std_logic_vector(31 downto 0);
      signal s_t_op_code, s_t_funct: std_logic_vector(5 downto 0);
      signal s_t_op_mode: std_logic_vector(2 downto 0);
      signal s_t_rs, s_t_rt, s_t_rd, s_t_shamt: std_logic_vector(4 downto 0);
      signal s_t_imm: std_logic_vector(15 downto 0);
      signal s_t_address: std_logic_vector(25 downto 0);
  
  -- procedure print messages definition.
  procedure print_message( pi_s_t_ir: std_logic_vector(31 downto 0);  po_s_t_op_code, po_s_t_funct: std_logic_vector(5 downto 0); po_s_t_op_mode: std_logic_vector(2 downto 0); po_s_t_rs, po_s_t_rt, po_s_t_rd, po_s_t_shamt: std_logic_vector(4 downto 0); po_s_t_imm: std_logic_vector(15 downto 0); po_s_t_address: std_logic_vector(25 downto 0); pe_op_code, pe_funct: std_logic_vector(5 downto 0);pe_op_mode: std_logic_vector(2 downto 0); pe_rs, pe_rt, pe_rd, pe_shamt: std_logic_vector(4 downto 0); pe_imm: std_logic_vector(15 downto 0); pe_address: std_logic_vector(25 downto 0)
  ) is
  
  variable line_out: line;
  begin
    write(line_out, string'("   At time "));
    write(line_out, now);
    write(line_out, string'(", inputs ["));
    write(line_out, string'(" s_t_ir: "));
	write(line_out, pi_s_t_ir);
	
    write(line_out, string'("]"));
    
    write(line_out, string'(", outputs ["));
    write(line_out, string'(" s_t_op_code: "));
	write(line_out, string'("(generated: "));
	write(line_out, po_s_t_op_code);
	write(line_out, string'(", expected: "));
	write(line_out, pe_op_code);
	write(line_out, string'(")"));
	write(line_out, string'(" s_t_op_mode: "));
	write(line_out, string'("(generated: "));
	write(line_out, po_s_t_op_mode);
	write(line_out, string'(", expected: "));
	write(line_out, pe_op_mode);
	write(line_out, string'(")"));
	write(line_out, string'(" s_t_rs: "));
	write(line_out, string'("(generated: "));
	write(line_out, po_s_t_rs);
	write(line_out, string'(", expected: "));
	write(line_out, pe_rs);
	write(line_out, string'(")"));
	write(line_out, string'(" s_t_rt: "));
	write(line_out, string'("(generated: "));
	write(line_out, po_s_t_rt);
	write(line_out, string'(", expected: "));
	write(line_out, pe_rt);
	write(line_out, string'(")"));
	write(line_out, string'(" s_t_rd: "));
	write(line_out, string'("(generated: "));
	write(line_out, po_s_t_rd);
	write(line_out, string'(", expected: "));
	write(line_out, pe_rd);
	write(line_out, string'(")"));
	write(line_out, string'(" s_t_shamt: "));
	write(line_out, string'("(generated: "));
	write(line_out, po_s_t_shamt);
	write(line_out, string'(", expected: "));
	write(line_out, pe_shamt);
	write(line_out, string'(")"));
	write(line_out, string'(" s_t_imm: "));
	write(line_out, string'("(generated: "));
	write(line_out, po_s_t_imm);
	write(line_out, string'(", expected: "));
	write(line_out, pe_imm);
	write(line_out, string'(")"));
	write(line_out, string'(" s_t_address: "));
	write(line_out, string'("(generated: "));
	write(line_out, po_s_t_address);
	write(line_out, string'(", expected: "));
	write(line_out, pe_address);
	write(line_out, string'(")"));
	
    write(line_out, string'("]"));
    if ieee.std_logic_unsigned."="(s_t_op_code, pe_op_code) and 
       ieee.std_logic_unsigned."="(s_t_op_mode, pe_op_mode) and 
       ieee.std_logic_unsigned."="(s_t_rs, pe_rs) and 
       ieee.std_logic_unsigned."="(s_t_rt, pe_rt) and 
       ieee.std_logic_unsigned."="(s_t_rd, pe_rd) and 
       ieee.std_logic_unsigned."="(s_t_shamt, pe_shamt) and 
       ieee.std_logic_unsigned."="(s_t_imm, pe_imm) and 
       ieee.std_logic_unsigned."="(s_t_address, pe_address)  then
        write(line_out, string'(" [OK]"));
    else
        write(line_out, string'(" [Error]"));
    end if;
    writeline(output, line_out);
  end procedure print_message;
  
  begin
    --  Component instantiation.
	--  port map (<<p_in_1>> => <<s_t_in_1>>)
	uc_0: uc port map ( ir=>s_t_ir, op_code=>s_t_op_code, funct=>s_t_funct, op_mode=>s_t_op_mode, rs=>s_t_rs, rt=>s_t_rt, rd=>s_t_rd, shamt=>s_t_shamt, imm=>s_t_imm, address=>s_t_address);

    --  Process that works.
    process
        -- line to print.
        variable line_out: line;
		-- A record is created with the inputs and outputs of the entity.
		-- (<<entrada1>>, <<entradaN>>, <<saida1>>, <<saidaN>>)
		type pattern_type is record
			-- inputs.
			 vi_ir: std_logic_vector(31 downto 0);
			-- outputs.
			 vo_op_mode: std_logic_vector(2 downto 0);
             vo_op_code: std_logic_vector(5 downto 0);
             vo_rs, vo_rt, vo_rd, vo_shamt: std_logic_vector(4 downto 0);
             vo_funct: std_logic_vector(5 downto 0);
             vo_imm: std_logic_vector(15 downto 0);
             vo_address: std_logic_vector(25 downto 0);
		end record;
        
		--  The input patterns are applied (injected) to the inputs of the entity under test.
		type pattern_array is array (natural range <>) of pattern_type;
		-- Test cases.
		constant patterns : pattern_array :=
		(
            -- add $t0, $zero, $s1.
            -- ir, op_mode, op_code, rs, rt, rd, shamt, funct, imm, address.
			("00000000000100010100000000100000", "000", "000000", "00000", "10001", "01000", "00000", "100000", "0000000000000000", "00000000000000000000000000"),
            ("00000000000100010100000000100000", "000", "000000", "00000", "10001", "01000", "00000", "100000", "0000000000000000", "00000000000000000000000000")
			
		);
		begin
        -- Message starting...
        write(line_out, string'("Running testbench: uc_tb."));
        writeline(output, line_out);
        write(line_out, string'(" Testing entity: uc."));
        writeline(output, line_out);
		-- Injects the inputs and check thte outputs.
		for i in patterns'range loop
			-- Injects the inputs.
			s_t_ir <= patterns(i).vi_ir;
			
			-- wait for results.
			wait for 1 ns;
			-- Checks the result with the expected output in the pattern.
            print_message( s_t_ir,  s_t_op_code, s_t_funct, s_t_op_mode, s_t_rs, s_t_rt, s_t_rd, s_t_shamt, s_t_imm, s_t_address,  patterns(i).vo_op_code, patterns(i).vo_funct, patterns(i).vo_op_mode, patterns(i).vo_rs, patterns(i).vo_rt, patterns(i).vo_rd, patterns(i).vo_shamt, patterns(i).vo_imm, patterns(i).vo_address);
            
			assert ieee.std_logic_unsigned."="(s_t_op_code, patterns(i).vo_op_code)	report "Valor de s_t_op_code não confere com o resultado esperado." severity error;
            assert ieee.std_logic_unsigned."="(s_t_funct, patterns(i).vo_funct)	report "Valor de s_t_funct não confere com o resultado esperado." severity error;
			 assert ieee.std_logic_unsigned."="(s_t_op_mode, patterns(i).vo_op_mode)	report "Valor de s_t_op_mode não confere com o resultado esperado." severity error;
			 assert ieee.std_logic_unsigned."="(s_t_rs, patterns(i).vo_rs)	report "Valor de s_t_rs não confere com o resultado esperado." severity error;
			 assert ieee.std_logic_unsigned."="(s_t_rt, patterns(i).vo_rt)	report "Valor de s_t_rt não confere com o resultado esperado." severity error;
			 assert ieee.std_logic_unsigned."="(s_t_rd, patterns(i).vo_rd)	report "Valor de s_t_rd não confere com o resultado esperado." severity error;
			 assert ieee.std_logic_unsigned."="(s_t_shamt, patterns(i).vo_shamt)	report "Valor de s_t_shamt não confere com o resultado esperado." severity error;
			 assert ieee.std_logic_unsigned."="(s_t_imm, patterns(i).vo_imm)	report "Valor de s_t_imm não confere com o resultado esperado." severity error;
			 assert ieee.std_logic_unsigned."="(s_t_address, patterns(i).vo_address)	report "Valor de s_t_address não confere com o resultado esperado." severity error;
			
		end loop;
        
        write(line_out, string'("Execution of uc_tb finished."));
        writeline(output, line_out);      
		assert false report "End of test." severity note;
		--  Wait forever; Isto finaliza a simulação.
		wait;
	end process;
end funcional;
